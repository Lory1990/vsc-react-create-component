#https://www.visualstudiogeeks.com/github/extensions/publish-vscode-extension-using-github-actions
name: vsc-react-create-component

on:
  push:
    branches: 
      - main
    paths-ignore: # dont run when changes made to these folders 
      - '.vscode/**'

jobs:
  build-and-deploy:
    name: cicd
    runs-on: windows-latest
    steps:

      - name: checkout repo
        uses: actions/checkout@v2

      - name: fetch all history and tags from all branches for gitversion
        run: git fetch --prune --unshallow

      - name: install gitversion tool
        uses: gittools/actions/gitversion/setup@v0.9.9
        with:
            versionSpec: '5.1.x'
      
      - name: execute gitversion
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.9.9
        
      # - name: print gitversion
      #   run: |
      #     echo "Major: ${{ steps.gitversion.outputs.Major }}"
      #     echo "Minor: ${{ steps.gitversion.outputs.Minor }}"
      #     echo "Patch: ${{ steps.gitversion.outputs.Patch }}"
      #     echo "PreReleaseTag: ${{ steps.gitversion.outputs.PreReleaseTag }}"
      #     echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.PreReleaseTagWithDash }}"
      #     echo "PreReleaseLabel: ${{ steps.gitversion.outputs.PreReleaseLabel }}"
      #     echo "PreReleaseNumber: ${{ steps.gitversion.outputs.PreReleaseNumber }}"
      #     echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.WeightedPreReleaseNumber }}"
      #     echo "BuildMetaData: ${{ steps.gitversion.outputs.BuildMetaData }}"
      #     echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.BuildMetaDataPadded }}"
      #     echo "FullBuildMetaData: ${{ steps.gitversion.outputs.FullBuildMetaData }}"
      #     echo "MajorMinorPatch: ${{ steps.gitversion.outputs.MajorMinorPatch }}"
      #     echo "SemVer: ${{ steps.gitversion.outputs.SemVer }}"
      #     echo "LegacySemVer: ${{ steps.gitversion.outputs.LegacySemVer }}"
      #     echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.LegacySemVerPadded }}"
      #     echo "AssemblySemVer: ${{ steps.gitversion.outputs.AssemblySemVer }}"
      #     echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.AssemblySemFileVer }}"
      #     echo "FullSemVer: ${{ steps.gitversion.outputs.FullSemVer }}"
      #     echo "InformationalVersion: ${{ steps.gitversion.outputs.InformationalVersion }}"
      #     echo "BranchName: ${{ steps.gitversion.outputs.BranchName }}"
      #     echo "Sha: ${{ steps.gitversion.outputs.Sha }}"
      #     echo "ShortSha: ${{ steps.gitversion.outputs.ShortSha }}"
      #     echo "NuGetVersionV2: ${{ steps.gitversion.outputs.NuGetVersionV2 }}"
      #     echo "NuGetVersion: ${{ steps.gitversion.outputs.NuGetVersion }}"
      #     echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.NuGetPreReleaseTagV2 }}"
      #     echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.NuGetPreReleaseTag }}"
      #     echo "VersionSourceSha: ${{ steps.gitversion.outputs.VersionSourceSha }}"
      #     echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
      #     echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.CommitsSinceVersionSourcePadded }}"
      #     echo "CommitDate: ${{ steps.gitversion.outputs.CommitDate }}"

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: clean install dependencies
        run: yarn install

      - name: update metadata in package.json
        uses: onlyutkarsh/patch-files-action@v1.0.1
        with:
          files: '${{github.workspace}}/package.json'
          patch-syntax: |
            = /version => "${{ steps.gitversion.outputs.majorMinorPatch }}"
      
      - name: add version in CHANGELOG.md
        uses: cschleiden/replace-tokens@v1.0
        with:
          files: '${{github.workspace}}/CHANGELOG.md'
        env:
          VERSION: "${{ steps.gitversion.outputs.majorMinorPatch }}"

      - name: compile and create vsix
        run: yarn vsce package

      - name: print vsix path
        run: |
          echo "Component path: ${{ env.vsix_path }}"

      - name: upload vsix as artifact
        uses: actions/upload-artifact@v1
        with:
          name: vsc-react-create-component-${{steps.gitversion.outputs.majorMinorPatch}}.vsix
          path: ${{github.workspace}}/vsc-react-create-component-${{steps.gitversion.outputs.majorMinorPatch}}.vsix

      - name: publish to marketplace
        if: github.ref == 'refs/heads/main'
        run: npm run deploy ${{ secrets.PAT }}

      - name: create a release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ steps.gitversion.outputs.majorMinorPatch }}
          release_name: v${{ steps.gitversion.outputs.majorMinorPatch }}